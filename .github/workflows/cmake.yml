name: CMake

on:
  push:         # Keep empty to run on each branch when push the code. Otherwise use branches: [ master ]
  pull_request: # Set to master to run only when merge with master branch
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

# The CMake configure and build commands are platform agnostic and should work equally well on Windows or Linux.
# You can convert this to a matrix build if you need cross-platform coverage.
# See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix

jobs:
  build-tests:
    name: ${{matrix.config.name}}
    runs-on: ${{matrix.config.os}}

    strategy:
      fail-fast: false
      matrix:
        config: # Create matrix with combinations
            # compile AREG engine as a shared library with GNU g++ / gcc on Ubuntu Linux, enable AREG extensions and logs
          - { name: linux-gnu-shared-ext-log,     os: ubuntu-latest,  lib: shared,  family: gnu,    cxx: g++,     cc: gcc,    extend: ON,   logs: ON}
            # compile AREG engine as a shared library with GNU g++ / gcc on Ubuntu Linux, enable AREG extensions and no logs
          - { name: linux-gnu-shared-ext-nolog,   os: ubuntu-latest,  lib: shared,  family: gnu,    cxx: g++,     cc: gcc,    extend: ON,   logs: OFF}
            # compile AREG engine as a static library with GNU g++ / gcc on Ubuntu Linux, enable AREG extensions and logs
          - { name: linux-gnu-static-ext-log,     os: ubuntu-latest,  lib: static,  family: gnu,    cxx: g++,     cc: gcc,    extend: ON,   logs: ON}
            # compile AREG engine as a shared library with GNU g++ / gcc on Ubuntu Linux, disable AREG extensions and logs
          - { name: linux-gnu-shared-noext-log,   os: ubuntu-latest,  lib: shared,  family: gnu,    cxx: g++,     cc: gcc,    extend: OFF,  logs: ON}
            # compile AREG engine as a shared library with GNU g++ / gcc on Ubuntu Linux, disable AREG extensions and no logs
          - { name: linux-gnu-shared-noext-nolog, os: ubuntu-latest,  lib: shared,  family: gnu,    cxx: g++,     cc: gcc,    extend: OFF,  logs: OFF}
            # compile AREG engine as a shared library with clang on Ubuntu Linux, enable AREG extensions and logs
          - { name: linux-clang-shared-ext-log,   os: ubuntu-latest,  lib: shared,  family: llvm,   cxx: clang++, cc: clang,  extend: ON,   logs: ON}
            # compile AREG engine as a shared library with clang on Ubuntu Linux, enable AREG extensions and no logs
          - { name: linux-clang-shared-ext-nolog, os: ubuntu-latest,  lib: shared,  family: llvm,   cxx: clang++, cc: clang,  extend: ON,   logs: OFF}
            # compile AREG engine as a static library with clang on Ubuntu Linux, enable AREG extensions and logs
          - { name: linux-clang-static-ext-log,   os: ubuntu-latest,  lib: static,  family: llvm,   cxx: clang++, cc: clang,  extend: ON,   logs: ON}
            # compile AREG engine as a shared library with clang on Ubuntu Linux, disable AREG extensions and logs
          - { name: linux-clang-shared-noext-log, os: ubuntu-latest,  lib: shared,  family: llvm,   cxx: clang++, cc: clang,  extend: OFF,  logs: ON}
            # compile AREG engine as a shared library with clang on Ubuntu Linux, disable AREG extensions and no logs
          - { name: linux-clang-shared-noext-nolog,os: ubuntu-latest, lib: shared,  family: llvm,   cxx: clang++, cc: clang,  extend: OFF,  logs: OFF}
            # compile AREG engine as a shared with CYGWIN g++ / gcc on Windows, enable AREG extensions and logs
          - { name: win-cygwin-shared-ext-log,    os: windows-latest, lib: shared,  family: cygwin, cxx: g++,     cc: gcc,    extend: ON,   logs: ON}
            # compile AREG engine as a shared with CYGWIN g++ / gcc on Windows, enable AREG extensions and no logs
          - { name: win-cygwin-shared-ext-nolog,  os: windows-latest, lib: shared,  family: cygwin, cxx: g++,     cc: gcc,    extend: ON,   logs: OFF}
            # compile AREG engine as a static with CYGWIN g++ / gcc on Windows, enable AREG extensions and logs
          - { name: win-cygwin-static-ext-log,    os: windows-latest, lib: static,  family: cygwin, cxx: g++,     cc: gcc,    extend: ON,   logs: ON}
            # compile AREG engine as a shared with CYGWIN g++ / gcc on Windows, disable AREG extensions and logs
          - { name: win-cygwin-shared-noext-log,  os: windows-latest, lib: shared,  family: cygwin, cxx: g++,     cc: gcc,    extend: OFF,  logs: ON}
            # compile AREG engine as a shared with CYGWIN g++ / gcc on Windows, disable AREG extensions and no logs
          - { name: win-cygwin-shared-noext-nolog,os: windows-latest, lib: shared,  family: cygwin, cxx: g++,     cc: gcc,    extend: OFF,  logs: OFF}
            # compile AREG engine as a shared with MSVC on Windows, enable AREG extensions and logs
          - { name: win-msvc-shared-ext-log,      os: windows-latest, lib: shared,  family: msvc,   cxx: cl,      cc: cl,     extend: ON,   logs: ON}
            # compile AREG engine as a shared with MSVC on Windows, enable AREG extensions and no logs
          - { name: win-msvc-shared-ext-nolog,    os: windows-latest, lib: shared,  family: msvc,   cxx: cl,      cc: cl,     extend: ON,   logs: OFF}
            # compile AREG engine as a static with MSVC on Windows, enable AREG extensions and logs
          - { name: win-msvc-static-ext-log,      os: windows-latest, lib: static, family: msvc,    cxx: cl,      cc: cl,     extend: ON,   logs: ON}
            # compile AREG engine as a shared with MSVC on Windows, enable AREG extensions and logs
          - { name: win-msvc-shared-noext-log,    os: windows-latest, lib: shared,  family: msvc,   cxx: cl,      cc: cl,     extend: OFF,  logs: ON}
            # compile AREG engine as a shared with MSVC on Windows, enable AREG extensions and no logs
          - { name: win-msvc-shared-noext-nolog,  os: windows-latest, lib: shared,  family: msvc,   cxx: cl,      cc: cl,     extend: OFF,  logs: OFF}

    steps:

      - name: Checkout AREG engine (AREG SDK) source codes and dependencies
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Fetch cygwin installer on Windows
        if: matrix.config.os == 'windows-latest' && matrix.config.family == 'cygwin'
        shell: powershell
        run: Invoke-WebRequest https://cygwin.com/setup-x86_64.exe -OutFile C:\setup.exe

      - name: Install cygwin on Windows
        if: matrix.config.os == 'windows-latest' && matrix.config.family == 'cygwin'
        shell: cmd
        run: |
            c:\setup.exe -qgnO -s http://mirrors.kernel.org/sourceware/cygwin/ -l C:\cygwin-packages\ -P ^
            cmake,^
            dos2unix,^
            extra-cmake-modules,^
            flexdll,^
            gcc-g++,^
            make,^
            ncurses,^
            libncurses-devel

      - name: set Windows PATH environment variable
        if: matrix.config.os == 'windows-latest' && matrix.config.family == 'cygwin'
        run: echo "PATH=C:\cygwin64;C:\cygwin64\bin;C:\cygwin64\lib;%SYSTEMROOT%\system32;%PATH%" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
         
      - name: Configure CMake with enabled extended feature and selected compiler family
        if: matrix.config.extend == 'ON'
        working-directory: ${{github.workspace}}
        run: |
          cmake -B ./build -DAREG_COMPILER_FAMILY=${{matrix.config.family}} -DAREG_BUILD_TYPE=${{env.BUILD_TYPE}} -DAREG_BINARY=${{matrix.config.lib}} -DAREG_EXTENDED:BOOL=${{matrix.config.extend}} -DAREG_LOGS:BOOL=${{matrix.config.logs}}
    
      - name: Configure CMake for disabled extended feature and selected compiler
        if: matrix.config.extend == 'OFF'
        working-directory: ${{github.workspace}}
        run: |
          cmake -B ./build -DAREG_COMPILER=${{matrix.config.cc}} -DAREG_BUILD_TYPE=${{env.BUILD_TYPE}} -DAREG_BINARY=${{matrix.config.lib}} -DAREG_EXTENDED:BOOL=${{matrix.config.extend}} -DAREG_LOGS:BOOL=${{matrix.config.logs}}
    
      - name: Build with CMake
        working-directory: ${{github.workspace}}
        # Build your program with the given configuration
        run: cmake --build ./build -j10

      - name: Run Unit Tests
        working-directory: ${{github.workspace}}
        run: ctest --test-dir ./build --output-on-failure --output-junit test_results.xml
