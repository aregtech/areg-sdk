name: CMake

on:
  push:         # Keep empty to run on each branch when push the code. Otherwise use branches: [ master ]
    branches: [master]
  pull_request: # Set to master to run only when merge with master branch
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

# The CMake configure and build commands are platform agnostic and should work equally well on Windows or Linux.
# You can convert this to a matrix build if you need cross-platform coverage.
# See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix

jobs:
  build-tests:
    name: ${{matrix.config.name}}
    runs-on: ${{matrix.config.os}}

    strategy:
      fail-fast: false
      matrix:
        config: # Create matrix with combinations

            # compile AREG engine as a shared library with GNU g++ / gcc on Ubuntu Linux, enable AREG extensions and logs
          - { name  : linux-gnu-shared-ext-log,
              os    : ubuntu-latest,
              lib   : shared,
              family: gnu,
              cxx   : g++,
              cc    : gcc,
              extend: ON,
              logs  : ON,
              test  : OFF
            }

            # compile AREG engine as a shared library with GNU g++ / gcc on Ubuntu Linux, enable AREG extensions and no logs
          - { name  : linux-gnu-shared-ext-nolog,
              os    : ubuntu-latest,
              lib   : shared,
              family: gnu,
              cxx   : g++,
              cc    : gcc,
              extend: ON,
              logs  : OFF,
              test  : OFF
            }

            # compile AREG engine as a static library with GNU g++ / gcc on Ubuntu Linux, enable AREG extensions, logs, examples and tests
          - { name  : linux-gnu-static-all-test,
              os    : ubuntu-latest,
              lib   : static,
              family: gnu,
              cxx   : g++,
              cc    : gcc,
              extend: ON,
              logs  : ON,
              test: ON
            }

            # compile AREG engine as a shared library with GNU g++ / gcc on Ubuntu Linux, enable AREG extensions, logs, examples and tests
          - { name  : linux-gnu-shared-all-test,
              os    : ubuntu-latest,
              lib   : shared,
              family: gnu,
              cxx   : g++,
              cc    : gcc,
              extend: ON,
              logs  : ON,
              test  : ON
            }

            # compile AREG engine as a shared library with GNU g++ / gcc on Ubuntu Linux, disable AREG extensions and no logs
          - { name  : linux-gnu-shared-noext-nolog,
              os    : ubuntu-latest,
              lib   : shared,
              family: gnu,
              cxx   : g++,
              cc    : gcc,
              extend: OFF,
              logs  : OFF,
              test  : OFF
            }

            # compile AREG engine as a shared library with clang on Ubuntu Linux, enable AREG extensions and logs
          - { name  : linux-clang-shared-ext-log,
              os    : ubuntu-latest,
              lib   : shared,
              family: llvm,
              cxx   : clang++,
              cc    : clang,
              extend: ON,
              logs  : ON,
              test  : OFF
            }

            # compile AREG engine as a shared library with clang on Ubuntu Linux, enable AREG extensions and no logs
          - { name  : linux-clang-shared-ext-nolog,
              os    : ubuntu-latest,
              lib   : shared,
              family: llvm,
              cxx   : clang++,
              cc    : clang,
              extend: ON,
              logs  : OFF,
              test  : OFF
            }

            # compile AREG engine as a static library with clang on Ubuntu Linux, enable AREG extensions, logs, examples and tests
          - { name  : linux-clang-static-all-test,
              os    : ubuntu-latest,
              lib   : static,
              family: llvm,
              cxx   : clang++,
              cc    : clang,
              extend: ON,
              logs  : ON,
              test  : ON
            }

            # compile AREG engine as a static library with clang on Ubuntu Linux, enable AREG extensions, logs, examples and tests
          - { name  : linux-clang-shared-all-test,
              os    : ubuntu-latest,
              lib   : shared,
              family: llvm,
              cxx   : clang++,
              cc    : clang,
              extend: ON,
              logs  : ON,
              test  : ON
            }

            # compile AREG engine as a shared library with clang on Ubuntu Linux, disable AREG extensions and no logs
          - { name  : linux-clang-shared-noext-nolog,
              os    : ubuntu-latest,
              lib   : shared,
              family: llvm,
              cxx   : clang++,
              cc    : clang,
              extend: OFF,
              logs  : OFF,
              test  : OFF
            }

            # compile AREG engine as a shared with CYGWIN g++ / gcc on Windows, enable AREG extensions and logs
          - { name  : win-cygwin-shared-ext-log,
              os    : windows-latest,
              lib   : shared,
              family: cygwin,
              cxx   : g++,
              cc    : gcc,
              extend: ON,
              logs  : ON,
              test  : OFF}

            # compile AREG engine as a shared with CYGWIN g++ / gcc on Windows, enable AREG extensions and no logs
          - { name  : win-cygwin-shared-ext-nolog,
              os    : windows-latest,
              lib   : shared,
              family: cygwin,
              cxx   : g++,
              cc    : gcc,
              extend: ON,
              logs  : OFF,
              test  : OFF
            }

            # compile AREG engine as a static with CYGWIN g++ / gcc on Windows, enable AREG extensions, logs, examples and tests
          - { name  : win-cygwin-static-all-test,
              os    : windows-latest,
              lib   : static,
              family: cygwin,
              cxx   : g++,
              cc    : gcc,
              extend: ON,
              logs  : ON,
              test  : ON
            }

            # compile AREG engine as a static with CYGWIN g++ / gcc on Windows, enable AREG extensions, logs, examples and tests
          - { name  : win-cygwin-shared-all-test,
              os    : windows-latest,
              lib   : shared,
              family: cygwin,
              cxx   : g++,
              cc    : gcc,
              extend: ON,
              logs  : ON,
              test  : ON
            }

            # compile AREG engine as a shared with CYGWIN g++ / gcc on Windows, disable AREG extensions and no logs
          - { name  : win-cygwin-shared-noext-nolog,
              os    : windows-latest,
              lib   : shared,
              family: cygwin,
              cxx   : g++,
              cc    : gcc,
              extend: OFF,
              logs  : OFF,
              test  : OFF
            }

            # compile AREG engine as a shared with MSVC on Windows, enable AREG extensions and logs
          - { name  : win-msvc-shared-ext-log,
              os    : windows-latest,
              lib   : shared,
              family: msvc,
              cxx   : cl,
              cc    : cl,
              extend: ON,
              logs  : ON,
              test  : OFF
            }

            # compile AREG engine as a shared with MSVC on Windows, enable AREG extensions and no logs
          - { name  : win-msvc-shared-ext-nolog,
              os    : windows-latest,
              lib   : shared,
              family: msvc,
              cxx   : cl,
              cc    : cl,
              extend: ON,
              logs  : OFF,
              test  : OFF
            }

            # compile AREG engine as a static with MSVC on Windows, enable AREG extensions, logs, examples and tests
          - { name  : win-msvc-static-all-test,
              os    : windows-latest,
              lib   : static,
              family: msvc,
              cxx   : cl,
              cc    : cl,
              extend: ON,
              logs  : ON,
              test  : ON
            }

            # compile AREG engine as a static with MSVC on Windows, enable AREG extensions, logs, examples and tests
          - { name  : win-msvc-shared-all-test,
              os    : windows-latest,
              lib   : shared,
              family: msvc,
              cxx   : cl,
              cc    : cl,
              extend: ON,
              logs  : ON,
              test  : ON
            }

            # compile AREG engine as a shared with MSVC on Windows, enable AREG extensions and logs
          - { name  : win-msvc-shared-noext-log,
              os    : windows-latest,
              lib   : shared,
              family: msvc,
              cxx   : cl,
              cc    : cl,
              extend: OFF,
              logs  : ON,
              test  : OFF
            }

            # compile AREG engine as a shared with MSVC on Windows, enable AREG extensions and no logs
          - { name  : win-msvc-shared-noext-nolog,
              os    : windows-latest,
              lib   : shared,
              family: msvc,
              cxx   : cl,
              cc    : cl,
              extend: OFF,
              logs  : OFF,
              test  : OFF
            }

    steps:

      - name: Checkout AREG engine (AREG SDK) source codes and dependencies
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Fetch cygwin installer on Windows
        if: matrix.config.os == 'windows-latest' && matrix.config.family == 'cygwin'
        shell: powershell
        run: Invoke-WebRequest https://cygwin.com/setup-x86_64.exe -OutFile C:\setup.exe

      - name: Install cygwin on Windows
        if: matrix.config.os == 'windows-latest' && matrix.config.family == 'cygwin'
        shell: cmd
        run: |
            c:\setup.exe -qgnO -s http://mirrors.kernel.org/sourceware/cygwin/ -l C:\cygwin-packages\ -P ^
            cmake,^
            make,^
            dos2unix,^
            flexdll,^
            gcc-g++,^
            ncurses,^
            libncurses-devel

      - name: set Windows PATH environment variable
        if: matrix.config.os == 'windows-latest' && matrix.config.family == 'cygwin'
        run: echo "PATH=C:\cygwin64;C:\cygwin64\bin;C:\cygwin64\lib;%SYSTEMROOT%\system32;%PATH%" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
         
      - name: Configure CMake with enabled extended feature and selected compiler family
        if: matrix.config.extend == 'ON'
        working-directory: ${{github.workspace}}
        run: |
          cmake -B ./build -DAREG_COMPILER_FAMILY=${{matrix.config.family}} -DAREG_BUILD_TYPE=${{env.BUILD_TYPE}} -DAREG_BINARY=${{matrix.config.lib}} -DAREG_EXTENDED:BOOL=${{matrix.config.extend}} -DAREG_LOGS:BOOL=${{matrix.config.logs}} -DAREG_BUILD_EXAMPLES:BOOL=OFF -DAREG_BUILD_TESTS:BOOL=${{matrix.config.test}}
    
      - name: Configure CMake for disabled extended feature and selected compiler
        if: matrix.config.extend == 'OFF'
        working-directory: ${{github.workspace}}
        run: |
          cmake -B ./build -DAREG_COMPILER=${{matrix.config.cc}} -DAREG_BUILD_TYPE=${{env.BUILD_TYPE}} -DAREG_BINARY=${{matrix.config.lib}} -DAREG_EXTENDED:BOOL=${{matrix.config.extend}} -DAREG_LOGS:BOOL=${{matrix.config.logs}} -DAREG_BUILD_EXAMPLES:BOOL=${{matrix.config.test}} -DAREG_BUILD_TESTS:BOOL=${{matrix.config.test}}
    
      - name: Build with CMake
        working-directory: ${{github.workspace}}
        # Build your program with the given configuration
        run: cmake --build ./build -j 16

      - name: Run Unit Tests
        if: matrix.config.test == 'ON'
        working-directory: ${{github.workspace}}
        run: ctest --test-dir ./build --output-on-failure --output-junit test_results.xml

      - name: Linux build path guess
        if: always() && matrix.config.os == 'ubuntu-latest'
        shell: bash
        run: |
          echo "BUILD_DEST=product/build/${{matrix.config.family}}-${{matrix.config.cxx}}/linux-64-x86_64-release-${{matrix.config.lib}}" >> "$GITHUB_ENV"

      - name: Windows build path guess
        if: always() && matrix.config.os == 'windows-latest'
        shell: bash
        run: |
          echo "BUILD_DEST=product/build/${{matrix.config.family}}-${{matrix.config.cxx}}/windows-64-amd64-release-${{matrix.config.lib}}" >> "$GITHUB_ENV"

      - name: Copy test artifacts
        if: failure() && matrix.config.test == 'ON'
        working-directory: ${{github.workspace}}
        shell: bash
        run: |
          mkdir ./${{matrix.config.name}}/
          cp -R ./${{env.BUILD_DEST}}/bin/ ./${{matrix.config.name}}/

      - name: Upload artifacts if use of external packages is set OFF
        if: failure() && matrix.config.test == 'ON'
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.config.name}}
          path: ./${{matrix.config.name}}/
