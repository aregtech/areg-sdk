@PACKAGE_INIT@
include(CMakeFindDependencyMacro)

# ##################################################
# Set AREG SDK essentials
# ##################################################

# Root folder of the SDK
set(AREG_SDK_ROOT           "@CMAKE_INSTALL_PREFIX@")
# Location of 'areg', 'aregextend' and 'areglogger' header files
set(AREG_FRAMEWORK          "@CMAKE_INSTALL_FULL_INCLUDEDIR@")
# Location of configuration, initialization and other shared files of AREG SDK
set(AREG_SHARE_DIR          "@CMAKE_INSTALL_PREFIX@/share/@AREG_PACKAGE_NAME@")
# Location of initialization file to copy as a template in the processes
set(AREG_SHARE_INIT         "${AREG_SHARE_DIR}/areg.init")
# Location of cmake configuration directory
set(AREG_CMAKE_CONFIG_DIR   "${AREG_SHARE_DIR}/conf/cmake")
# Location of AREG SDK tools.
set(AREG_SDK_TOOLS          "@CMAKE_INSTALL_PREFIX@/tools/@AREG_PACKAGE_NAME@")
# Location of the AREG SDK code generator
set(AREG_TOOL_CODEGEN       "${AREG_SDK_TOOLS}/codegen.jar")
# Full path to 'areg.cmake' to include in projects
set(AREG_CMAKE_EXPORTS      "${AREG_CMAKE_CONFIG_DIR}/areg.cmake")

# The build type of AREG libraries.
set(AREG_BUILD_TYPE         @AREG_BUILD_TYPE@)
# The library type of 'areg'. Static or dynamic
set(AREG_BINARY             @AREG_BINARY@)
# The library type of 'areglogger'. Static or dynamic.
set(AREG_LOGGER_BINARY      @AREG_LOGGER_BINARY@)

# set platform specific variables.
set(AREG_OS             @AREG_OS@)
set(AREG_DEVELOP_ENV    @AREG_DEVELOP_ENV@)
set(AREG_BITNESS        @AREG_BITNESS@)
set(AREG_PROCESSOR      @AREG_PROCESSOR@)

# Specify whether 'aregextend' is compiled with enabled extended objects flag
option(AREG_EXTENDED        "AREG Extended object flag"         @AREG_EXTENDED@)
# Specify whether the libraries where compiled with enabled logging.
option(AREG_LOGS            "AREG logging enable flag"          @AREG_LOGS@)

# include the exported targets
include("${CMAKE_CURRENT_LIST_DIR}/@AREG_PACKAGE_NAME@-targets.cmake")
check_required_components("@AREG_PACKAGE_NAME@")

# Minimum C++ standard to use
set(AREG_CXX_STANDARD ${AREG_CXX_STANDARD})
if (NOT DEFINED CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD  ${AREG_CXX_STANDARD})
elseif (${CMAKE_CXX_STANDARD} LESS ${AREG_CXX_STANDARD})
    message(WARNING "AREG: >>> AREG requires minimum C++${AREG_CXX_STANDARD}, current is C++${CMAKE_CXX_STANDARD}. Forcing to change to avoid compilation errors.")
    set(CMAKE_CXX_STANDARD  ${AREG_CXX_STANDARD})
endif()

# Unit tests are ignored
option(AREG_BUILD_TESTS     "No AREG Unit Tests"    OFF)
# Examples are ignored
option(AREG_BUILD_EXAMPLES  "No AREG Examples"      OFF)

# Change the build root directory if compiled fines are copied somewhere else.
# set to 'CMAKE_CURRENT_BINARY_DIR' if it should be in the compiled binaries directory
set(AREG_BUILD_ROOT         "${CMAKE_SOURCE_DIR}/product")

# Add '${AREG_FRAMEWORK}' path in the includes
include_directories(${AREG_FRAMEWORK})
# Pass the path to the shared 'areg.init' file to the source codes.

# Pass path to the 'areg.init' file as a preprocessor definition
add_definitions(-DAREG_SHARE_INIT="${AREG_SHARE_INIT}")

# Indicate the import flag of 'areg' library
if (AREG_BINARY MATCHES "shared")
    add_definitions(-DIMP_AREG_DLL)
else()
    add_definitions(-DIMP_AREG_LIB)
endif()

# Indicate the import flag of 'areg' library
if (AREG_LOGGER_BINARY MATCHES "shared")
    add_definitions(-DIMP_LOGGER_DLL)
else()
    add_definitions(-DIMP_LOGGER_LIB)
endif()

# Indicate the areg extended objects availability.
if (AREG_EXTENDED)
    add_definitions(-DAREG_EXTENDED=1)
else()
    add_definitions(-DAREG_EXTENDED=0)
endif()

# Indicate the areg logging availability.
if (AREG_LOGS)
    add_definitions(-DAREG_LOGS=1)
else()
    add_definitions(-DAREG_LOGS=0)
endif()

# Set the Platform API and the platform bitness.
if (AREG_DEVELOP_ENV STREQUAL "Win32")
    add_definitions(-DWINDOWS -DWIN32)
    if (${AREG_BITNESS} EQUAL 64)
        add_definitions(-DWIN64)
    endif()
else()
    add_definitions(-DPOSIX)
endif()

if (AREG_BITNESS EQUAL 32)
    add_definitions(-DBIT32)
else()
    add_definitions(-DBIT64)
endif()
