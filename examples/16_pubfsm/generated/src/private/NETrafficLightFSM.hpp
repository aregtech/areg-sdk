
//////////////////////////////////////////////////////////////////////////
// Begin generate NETrafficLightFSM.hpp file
//////////////////////////////////////////////////////////////////////////

#ifndef  GENERATED_SRC_PRIVATE_NETRAFFICLIGHTFSM_HPP
#define  GENERATED_SRC_PRIVATE_NETRAFFICLIGHTFSM_HPP

/************************************************************************
 * (c) copyright    2023
 *                  Generated by Aregtech code generator tool.
 * Generated at     03.01.2022  12:45:39 GMT+02:00 
 ************************************************************************/

/************************************************************************
 * \file            generated/src/private/NETrafficLightFSM.hpp
 * \ingroup         TrafficLight State Machine
 * \brief           This is an automatic generated code of TrafficLight namespace.
 ************************************************************************/

/************************************************************************
 * Include files
 ************************************************************************/

#include "areg/component/TEEvent.hpp"
#include <string_view>

//////////////////////////////////////////////////////////////////////////
// NETrafficLightFSM Namespace Declaration 
//////////////////////////////////////////////////////////////////////////
/**
 * \brief   NETrafficLightFSM namespace is used to declare
 *          predefined Constants, Types, Structures, Events and Timers
 *          of TrafficLight State Machine.
 **/
namespace NETrafficLightFSM
{

//////////////////////////////////////////////////////////////////////////
// Predefined constants of TrafficLight State Machine
//////////////////////////////////////////////////////////////////////////
    /**
     * \brief   NETrafficLightFSM::InstanceDefaultName
     *          The default name of TrafficLight State Machine instance.
     **/
    constexpr std::string_view   InstanceDefaultName{ "TrafficLight" };
    
//////////////////////////////////////////////////////////////////////////
// Available predefined events of TrafficLight State Machine
//////////////////////////////////////////////////////////////////////////
    /**
     * \brief   NETrafficLightFSM::eFsmEventValue
     *          TrafficLight State Machine available Event IDs
     **/
    enum class eFsmEventData
    {
        EVENT_StartTrafficLight /** DESCRIPTION MISSED **/

    };
   
    /**
     * \brief   Returns human readable string of NETrafficLightFSM::eFsmEventValue event values
     **/
    inline const char* const getString( const NETrafficLightFSM::eFsmEventData value );

    //////////////////////////////////////////////////////////////////////////
    // NETrafficLightFSM::FsmEventData class declaration
    //////////////////////////////////////////////////////////////////////////
    /************************************************************************
     * \brief   This is predefined Event Data class containing Event ID.
     *          When Event is triggered in State Machine, depending on
     *          Event ID, the appropriate processing method will be fired.
     ************************************************************************/
    class FsmEventData
    {
    //////////////////////////////////////////////////////////////////////////
    // Constructors / Destructor
    //////////////////////////////////////////////////////////////////////////
    public:
        FsmEventData( const NETrafficLightFSM::eFsmEventData & data )
            : mData ( data )
        {
        }

        FsmEventData( const FsmEventData & data ) = default;
        ~FsmEventData( void ) = default;
   
    public:
        /**
         * \brief   Returns event data value.
         **/
        inline const NETrafficLightFSM::eFsmEventData & getData( void ) const
        {
            return mData;
        }

    //////////////////////////////////////////////////////////////////////////
    // Member variable
    //////////////////////////////////////////////////////////////////////////
    public:
        /**
         * \brief   The Event Data
         **/
        const NETrafficLightFSM::eFsmEventData  mData;

    //////////////////////////////////////////////////////////////////////////
    // Hidden / Forbidden methods
    //////////////////////////////////////////////////////////////////////////
    private:
        FsmEventData( void ) = delete;
        NETrafficLightFSM::FsmEventData & operator = ( const NETrafficLightFSM::FsmEventData & src ) = delete;
   };
   
//////////////////////////////////////////////////////////////////////////
// Declare FSM Event and Event Consumer classes
//////////////////////////////////////////////////////////////////////////
/**
 * \brief   Declaration of NETrafficLightFSM::FsmEvent of internal type
 *          and declarataion of NETrafficLightFSM::IEFsmEventConsumer, which
 *          will be registered in the same thread, where it is instantiated.
 **/
DECLARE_INTERNAL_EVENT(FsmEventData, FsmEvent, IEFsmEventConsumer);

//////////////////////////////////////////////////////////////////////////
// Available predefined Timers of TrafficLight State Machine
//////////////////////////////////////////////////////////////////////////

    /**
     * \brief   NETrafficLightFSM::eFsmTimerData
                TrafficLight State Machine available Timer IDs
     *          
     **/
    enum class eFsmTimerData
    {
        Red            /** DESCRIPTION MISSED **/
      , YellowRed      /** DESCRIPTION MISSED **/
      , Green          /** DESCRIPTION MISSED **/
      , YellowGreen    /** DESCRIPTION MISSED **/
      , PedestrianWalk /** DESCRIPTION MISSED **/
      , VehicleWait    /** DESCRIPTION MISSED **/   
    };
   
    /**
     * \brief   Returns human readable string of NETrafficLightFSM::eFsmTimerData timer values
     **/
    inline const char* const getString( const NETrafficLightFSM::eFsmTimerData value );

};

//////////////////////////////////////////////////////////////////////////
// NETrafficLightFSM namespace inline methods
//////////////////////////////////////////////////////////////////////////
/**
 * Returns human readable string of event data
 **/
inline const char * const NETrafficLightFSM::getString( const NETrafficLightFSM::eFsmEventData value )
{
    switch ( value )
    {
    CASE_MAKE_STRING( NETrafficLightFSM::eFsmEventData::EVENT_StartTrafficLight );
    CASE_DEFAULT( "ERR: Unexpected NETrafficLightFSM::eFsmEventData event value!" );
    }
}

/**
 * Returns human readable string of timers
 **/
inline const char * const NETrafficLightFSM::getString( const NETrafficLightFSM::eFsmTimerData value )
{
    switch ( value )
    {
    CASE_MAKE_STRING( NETrafficLightFSM::eFsmTimerData::Red );
    CASE_MAKE_STRING( NETrafficLightFSM::eFsmTimerData::YellowRed );
    CASE_MAKE_STRING( NETrafficLightFSM::eFsmTimerData::Green );
    CASE_MAKE_STRING( NETrafficLightFSM::eFsmTimerData::YellowGreen );
    CASE_MAKE_STRING( NETrafficLightFSM::eFsmTimerData::PedestrianWalk );
    CASE_MAKE_STRING( NETrafficLightFSM::eFsmTimerData::VehicleWait );
    CASE_DEFAULT( "ERR: Unexpected NETrafficLightFSM::eFsmTimerData timer value!" );
    }
}
#endif  // GENERATED_SRC_PRIVATE_NETRAFFICLIGHTFSM_HPP

//////////////////////////////////////////////////////////////////////////
// End generate NETrafficLightFSM.hpp file
//////////////////////////////////////////////////////////////////////////
